{
  "name": "Email to Ticket - AI Classifier",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "mailbox": "INBOX",
        "postProcessAction": "read",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "email-trigger",
      "name": "Monitor Helpdesk Email",
      "type": "n8n-nodes-base.microsoftGraphEmail",
      "typeVersion": 2,
      "position": [250, 300],
      "credentials": {
        "microsoftGraphEmailOAuth2Api": {
          "id": "1",
          "name": "Microsoft Graph Email - helpdesk@surterreproperties.com"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "message": "=You are an intelligent email classifier for a helpdesk system. Analyze incoming emails and classify them into these categories:\n\n1. **SUPPORT_REQUEST** - Real support requests from employees needing help (WiFi issues, password resets, hardware problems, software issues, etc.)\n2. **VENDOR_EMAIL** - Automated emails from vendors/services (subscription confirmations, billing, newsletters, no-reply emails, marketing)\n3. **UNCERTAIN** - When you're not confident enough to classify (flag for manual review)\n\nRules:\n- Emails from known employee domains (@surterreproperties.com, @surterre.com) are LIKELY support requests\n- Emails from no-reply@, noreply@, support@, info@ are LIKELY vendor emails\n- Keywords like \"unsubscribe\", \"confirm subscription\", \"verify email\", \"newsletter\" indicate VENDOR_EMAIL\n- Real support keywords: \"help\", \"issue\", \"problem\", \"not working\", \"error\", \"can't\", \"unable to\"\n- If confidence is below 80%, classify as UNCERTAIN\n\nRespond in JSON format:\n{\n  \"classification\": \"SUPPORT_REQUEST|VENDOR_EMAIL|UNCERTAIN\",\n  \"confidence\": 0-100,\n  \"reason\": \"Brief explanation\",\n  \"extractedInfo\": {\n    \"issueType\": \"password|network|hardware|software|other\",\n    \"priority\": \"low|normal|high|urgent\",\n    \"department\": \"IT|HR|Finance|Sales|Other\"\n  }\n}"
            },
            {
              "role": "user",
              "message": "=Email Analysis:\n\nFrom: {{ $json.from.emailAddress.address }}\nSubject: {{ $json.subject }}\nBody: {{ $json.bodyPreview || $json.body.content }}\n\nAnalyze and classify this email."
            }
          ]
        },
        "options": {
          "temperature": 0.3
        }
      },
      "id": "openai-classifier",
      "name": "AI Email Classifier",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [450, 300],
      "credentials": {
        "openAiApi": {
          "id": "2",
          "name": "OpenAI - Helpdesk"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse OpenAI response and prepare data\nconst aiResponse = $input.item.json.choices[0].message.content;\nlet classification;\n\ntry {\n  classification = JSON.parse(aiResponse);\n} catch (error) {\n  // Fallback if JSON parsing fails\n  classification = {\n    classification: 'UNCERTAIN',\n    confidence: 0,\n    reason: 'Failed to parse AI response',\n    extractedInfo: {}\n  };\n}\n\nconst emailData = $('Monitor Helpdesk Email').item.json;\n\nreturn {\n  json: {\n    ...emailData,\n    aiClassification: classification.classification,\n    aiConfidence: classification.confidence,\n    aiReason: classification.reason,\n    extractedInfo: classification.extractedInfo || {},\n    senderEmail: emailData.from.emailAddress.address,\n    senderName: emailData.from.emailAddress.name,\n    emailSubject: emailData.subject,\n    emailBody: emailData.body?.content || emailData.bodyPreview,\n    receivedDateTime: emailData.receivedDateTime,\n    messageId: emailData.id\n  }\n};"
      },
      "id": "process-classification",
      "name": "Process AI Classification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.aiClassification }}",
              "operation": "equals",
              "value2": "SUPPORT_REQUEST"
            }
          ]
        }
      },
      "id": "route-decision",
      "name": "Classification Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.aiClassification }}",
              "operation": "equals",
              "value2": "UNCERTAIN"
            }
          ]
        }
      },
      "id": "check-uncertain",
      "name": "Check if Uncertain",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 450]
    },
    {
      "parameters": {
        "url": "http://helpdesk-app:3000/api/admin/knowledge-base",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "search",
              "value": "={{ $json.emailSubject }}"
            },
            {
              "name": "limit",
              "value": "3"
            }
          ]
        },
        "options": {}
      },
      "id": "search-kb",
      "name": "Search Knowledge Base",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1050, 150],
      "credentials": {
        "httpBasicAuth": {
          "id": "3",
          "name": "Helpdesk API Auth"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://helpdesk-app:3000/api/tickets",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.emailSubject }}"
            },
            {
              "name": "description",
              "value": "=**Email from:** {{ $json.senderName }} ({{ $json.senderEmail }})\n**Received:** {{ $json.receivedDateTime }}\n**AI Classification:** {{ $json.aiClassification }} ({{ $json.aiConfidence }}% confidence)\n**Issue Type:** {{ $json.extractedInfo.issueType }}\n\n---\n\n{{ $json.emailBody }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.extractedInfo.priority || 'NORMAL' }}"
            },
            {
              "name": "category",
              "value": "={{ $json.extractedInfo.issueType || 'General Question' }}"
            },
            {
              "name": "requesterEmail",
              "value": "={{ $json.senderEmail }}"
            },
            {
              "name": "source",
              "value": "email"
            },
            {
              "name": "metadata",
              "value": "={{ { emailMessageId: $json.messageId, aiConfidence: $json.aiConfidence, classificationReason: $json.aiReason } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "create-ticket",
      "name": "Create Support Ticket",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1250, 150],
      "credentials": {
        "httpBasicAuth": {
          "id": "3",
          "name": "Helpdesk API Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Check if KB articles were found\nconst kbData = $input.item.json;\nconst emailData = $('Process AI Classification').item.json;\nconst ticketData = $('Create Support Ticket').item.json;\n\nlet hasKBSolution = false;\nlet kbSolution = '';\n\nif (kbData.articles && kbData.articles.length > 0) {\n  hasKBSolution = true;\n  const topArticle = kbData.articles[0];\n  kbSolution = `**We found a solution in our knowledge base:**\\n\\n**${topArticle.title}**\\n\\n${topArticle.content.substring(0, 500)}...\\n\\nFor the complete solution, visit: ${process.env.NEXT_PUBLIC_BASE_URL}/knowledge-base/${topArticle.id}`;\n}\n\nreturn {\n  json: {\n    ...emailData,\n    ticketNumber: ticketData.ticketNumber,\n    ticketId: ticketData.id,\n    hasKBSolution,\n    kbSolution,\n    replyTo: emailData.senderEmail,\n    replySubject: `Re: ${emailData.emailSubject}`\n  }\n};"
      },
      "id": "prepare-reply",
      "name": "Prepare Auto-Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 150]
    },
    {
      "parameters": {
        "subject": "={{ $json.replySubject }}",
        "emailType": "html",
        "message": "=<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: #2563eb; color: white; padding: 20px; border-radius: 5px 5px 0 0; }\n    .content { background: #f8fafc; padding: 20px; }\n    .ticket-info { background: white; padding: 15px; border-left: 4px solid #2563eb; margin: 15px 0; }\n    .kb-solution { background: #dcfce7; border: 1px solid #86efac; padding: 15px; margin: 15px 0; border-radius: 5px; }\n    .footer { background: #64748b; color: white; padding: 15px; text-align: center; border-radius: 0 0 5px 5px; font-size: 12px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h2>🎫 Support Ticket Created</h2>\n    </div>\n    \n    <div class=\"content\">\n      <p>Dear {{ $json.senderName }},</p>\n      \n      <p>Thank you for contacting Surterre Properties Helpdesk. We have received your email and created a support ticket.</p>\n      \n      <div class=\"ticket-info\">\n        <strong>Ticket Number:</strong> {{ $json.ticketNumber }}<br>\n        <strong>Subject:</strong> {{ $json.emailSubject }}<br>\n        <strong>Priority:</strong> {{ $json.extractedInfo.priority || 'Normal' }}<br>\n        <strong>Status:</strong> New\n      </div>\n      \n      {{ $json.hasKBSolution ? \n        '<div class=\"kb-solution\"><h3>💡 Possible Solution Found</h3>' + $json.kbSolution + '</div>' : \n        '<p>Our support team will review your request and respond shortly. You can expect a response within the next business day.</p>' \n      }}\n      \n      <p>You can track your ticket status at any time by visiting our helpdesk portal.</p>\n      \n      <p><strong>Important:</strong> Please do not reply to this email. All updates will be sent to you directly.</p>\n      \n      <p>Best regards,<br>\n      <strong>Surterre Properties IT Helpdesk</strong></p>\n    </div>\n    \n    <div class=\"footer\">\n      Surterre Properties | helpdesk@surterreproperties.com<br>\n      This is an automated message. Please do not reply.\n    </div>\n  </div>\n</body>\n</html>",
        "options": {
          "allowUnauthorizedCerts": false
        },
        "toList": {
          "item": [
            {
              "address": "={{ $json.replyTo }}"
            }
          ]
        }
      },
      "id": "send-auto-reply",
      "name": "Send Auto-Reply Email",
      "type": "n8n-nodes-base.microsoftGraphEmail",
      "typeVersion": 2,
      "position": [1650, 150],
      "credentials": {
        "microsoftGraphEmailOAuth2Api": {
          "id": "1",
          "name": "Microsoft Graph Email - helpdesk@surterreproperties.com"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://helpdesk-app:3000/api/admin/notifications",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "type",
              "value": "uncertain_email_classification"
            },
            {
              "name": "title",
              "value": "⚠️ Uncertain Email Classification"
            },
            {
              "name": "message",
              "value": "=**From:** {{ $json.senderEmail }}\n**Subject:** {{ $json.emailSubject }}\n**AI Confidence:** {{ $json.aiConfidence }}%\n**Reason:** {{ $json.aiReason }}\n\n**Action Required:** Please manually review this email and create a ticket if needed."
            },
            {
              "name": "severity",
              "value": "warning"
            },
            {
              "name": "recipientRoles",
              "value": "={{ ['Admin'] }}"
            },
            {
              "name": "metadata",
              "value": "={{ { emailMessageId: $json.messageId, senderEmail: $json.senderEmail, classification: $json.aiClassification } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "notify-admin",
      "name": "Notify Admin - Uncertain",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1250, 600],
      "credentials": {
        "httpBasicAuth": {
          "id": "3",
          "name": "Helpdesk API Auth"
        }
      }
    },
    {
      "parameters": {},
      "id": "ignore-vendor",
      "name": "Ignore Vendor Email",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1250, 450],
      "notes": "Vendor emails are silently ignored as per requirements"
    },
    {
      "parameters": {
        "jsCode": "// Log all activity for monitoring\nconst data = $input.item.json;\n\nconsole.log('Email Processing Summary:', {\n  messageId: data.messageId,\n  from: data.senderEmail,\n  subject: data.emailSubject,\n  classification: data.aiClassification,\n  confidence: data.aiConfidence,\n  action: data.ticketNumber ? `Created ticket ${data.ticketNumber}` : \n          data.aiClassification === 'VENDOR_EMAIL' ? 'Ignored' : 'Flagged for review'\n});\n\nreturn { json: data };"
      },
      "id": "log-activity",
      "name": "Log Processing Activity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 300]
    }
  ],
  "connections": {
    "Monitor Helpdesk Email": {
      "main": [
        [
          {
            "node": "AI Email Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Email Classifier": {
      "main": [
        [
          {
            "node": "Process AI Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Classification": {
      "main": [
        [
          {
            "node": "Classification Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Router": {
      "main": [
        [
          {
            "node": "Search Knowledge Base",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check if Uncertain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Uncertain": {
      "main": [
        [
          {
            "node": "Notify Admin - Uncertain",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ignore Vendor Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Knowledge Base": {
      "main": [
        [
          {
            "node": "Create Support Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Support Ticket": {
      "main": [
        [
          {
            "node": "Prepare Auto-Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Auto-Reply": {
      "main": [
        [
          {
            "node": "Send Auto-Reply Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Auto-Reply Email": {
      "main": [
        [
          {
            "node": "Log Processing Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Admin - Uncertain": {
      "main": [
        [
          {
            "node": "Log Processing Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ignore Vendor Email": {
      "main": [
        [
          {
            "node": "Log Processing Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-03T00:00:00.000Z",
  "versionId": "1"
}
