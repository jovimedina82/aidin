import { NextResponse } from 'next/server'
import { getCurrentUser } from '@/lib/auth'
import { requireRoles } from '@/lib/api-utils'
import { prisma } from '@/lib/prisma'
import fs from 'fs'
import path from 'path'

// GET - Fetch current environment settings
export async function GET(request) {
  try {
    const user = await getCurrentUser(request)
    requireRoles(user, ['Admin'])

    // Return current environment configuration (sanitized - no secrets in plain text)
    const settings = {
      // Authentication
      auth: {
        jwtSecret: process.env.JWT_SECRET ? '••••••••' : '',
        devLoginEnabled: process.env.DEV_LOGIN_ENABLED === 'true',
        devAdminEmail: process.env.DEV_ADMIN_EMAIL || '',
        authDevBypass: process.env.AUTH_DEV_BYPASS === 'true',
      },

      // Azure AD
      azure: {
        tenantId: process.env.AZURE_AD_TENANT_ID || '',
        clientId: process.env.AZURE_AD_CLIENT_ID || '',
        clientSecret: process.env.AZURE_AD_CLIENT_SECRET ? '••••••••' : '',
        syncGroup: process.env.MICROSOFT_GRAPH_SYNC_GROUP || '',
        syncInterval: process.env.SYNC_INTERVAL_MINUTES || '30',
      },

      // Google Workspace (placeholder for future)
      google: {
        clientId: process.env.GOOGLE_CLIENT_ID || '',
        clientSecret: process.env.GOOGLE_CLIENT_SECRET ? '••••••••' : '',
        workspaceDomain: process.env.GOOGLE_WORKSPACE_DOMAIN || '',
      },

      // Email Configuration
      email: {
        provider: process.env.EMAIL_PROVIDER || 'smtp',
        smtpHost: process.env.SMTP_HOST || '',
        smtpPort: process.env.SMTP_PORT || '587',
        smtpUser: process.env.SMTP_USER || '',
        smtpPass: process.env.SMTP_PASS ? '••••••••' : '',
        helpdeskEmail: process.env.HELPDESK_EMAIL || '',
        inboundEnabled: process.env.INBOUND_EMAIL_ENABLED === 'true',
      },

      // AI Configuration
      ai: {
        provider: process.env.AI_PROVIDER || 'anthropic',
        anthropicKey: process.env.ANTHROPIC_API_KEY ? '••••••••' : '',
        openaiKey: process.env.OPENAI_API_KEY ? '••••••••' : '',
      },

      // Feature Flags
      features: {
        autoAssignEnabled: process.env.AUTO_ASSIGN_ENABLED === 'true',
        publicRegistration: process.env.ENABLE_PUBLIC_REGISTRATION === 'true',
      },

      // URLs
      urls: {
        baseUrl: process.env.BASE_URL || '',
        publicBaseUrl: process.env.NEXT_PUBLIC_BASE_URL || '',
        nextAuthUrl: process.env.NEXTAUTH_URL || '',
      },

      // Database
      database: {
        url: process.env.DATABASE_URL ? '••••••••' : '',
      }
    }

    return NextResponse.json(settings)
  } catch (error) {
    console.error('Error fetching settings:', error)
    return NextResponse.json(
      { error: error.message || 'Failed to fetch settings' },
      { status: error.status || 500 }
    )
  }
}

// PUT - Update environment settings
export async function PUT(request) {
  try {
    const user = await getCurrentUser(request)
    requireRoles(user, ['Admin'])

    const updates = await request.json()

    // Read current .env.local file
    const envPath = path.join(process.cwd(), '.env.local')
    let envContent = ''

    try {
      envContent = fs.readFileSync(envPath, 'utf8')
    } catch (error) {
      // If .env.local doesn't exist, create it
      envContent = '# Generated by AIDIN Admin Panel\n'
    }

    // Parse existing env vars into a map
    const envVars = new Map()
    const lines = envContent.split('\n')
    const comments = []

    lines.forEach(line => {
      if (line.trim().startsWith('#') || line.trim() === '') {
        comments.push(line)
      } else if (line.includes('=')) {
        const [key, ...valueParts] = line.split('=')
        envVars.set(key.trim(), valueParts.join('='))
      }
    })

    // Update values based on the updates object
    const updateEnvVar = (key, value, section) => {
      // Skip if value is masked (••••••••)
      if (value === '••••••••' || value === undefined || value === null) {
        return
      }

      // Convert boolean to string
      if (typeof value === 'boolean') {
        value = value ? 'true' : 'false'
      }

      envVars.set(key, value)
    }

    // Auth settings
    if (updates.auth) {
      updateEnvVar('DEV_LOGIN_ENABLED', updates.auth.devLoginEnabled)
      updateEnvVar('DEV_ADMIN_EMAIL', updates.auth.devAdminEmail)
      updateEnvVar('AUTH_DEV_BYPASS', updates.auth.authDevBypass)
      updateEnvVar('NEXT_PUBLIC_AUTH_DEV_BYPASS', updates.auth.authDevBypass)
      updateEnvVar('NEXT_PUBLIC_DEV_LOGIN', updates.auth.devLoginEnabled)
      if (updates.auth.jwtSecret && updates.auth.jwtSecret !== '••••••••') {
        updateEnvVar('JWT_SECRET', updates.auth.jwtSecret)
      }
    }

    // Azure settings
    if (updates.azure) {
      updateEnvVar('AZURE_AD_TENANT_ID', updates.azure.tenantId)
      updateEnvVar('AZURE_AD_CLIENT_ID', updates.azure.clientId)
      updateEnvVar('AZURE_TENANT_ID', updates.azure.tenantId)
      updateEnvVar('AZURE_CLIENT_ID', updates.azure.clientId)
      updateEnvVar('NEXT_PUBLIC_AZURE_AD_TENANT_ID', updates.azure.tenantId)
      updateEnvVar('NEXT_PUBLIC_AZURE_TENANT_ID', updates.azure.tenantId)
      updateEnvVar('NEXT_PUBLIC_AZURE_AD_CLIENT_ID', updates.azure.clientId)
      updateEnvVar('NEXT_PUBLIC_AZURE_CLIENT_ID', updates.azure.clientId)
      updateEnvVar('MICROSOFT_GRAPH_SYNC_GROUP', updates.azure.syncGroup)
      updateEnvVar('SYNC_INTERVAL_MINUTES', updates.azure.syncInterval)

      if (updates.azure.clientSecret && updates.azure.clientSecret !== '••••••••') {
        updateEnvVar('AZURE_AD_CLIENT_SECRET', updates.azure.clientSecret)
        updateEnvVar('AZURE_CLIENT_SECRET', updates.azure.clientSecret)
      }

      // Update graph URLs if tenant ID changed
      if (updates.azure.tenantId) {
        updateEnvVar('GRAPH_AUTH_URL', `https://login.microsoftonline.com/${updates.azure.tenantId}/oauth2/v2.0/token`)
      }
    }

    // Google settings
    if (updates.google) {
      updateEnvVar('GOOGLE_CLIENT_ID', updates.google.clientId)
      updateEnvVar('GOOGLE_WORKSPACE_DOMAIN', updates.google.workspaceDomain)
      if (updates.google.clientSecret && updates.google.clientSecret !== '••••••••') {
        updateEnvVar('GOOGLE_CLIENT_SECRET', updates.google.clientSecret)
      }
    }

    // Email settings
    if (updates.email) {
      updateEnvVar('EMAIL_PROVIDER', updates.email.provider)
      updateEnvVar('SMTP_HOST', updates.email.smtpHost)
      updateEnvVar('SMTP_PORT', updates.email.smtpPort)
      updateEnvVar('SMTP_USER', updates.email.smtpUser)
      updateEnvVar('HELPDESK_EMAIL', updates.email.helpdeskEmail)
      updateEnvVar('INBOUND_EMAIL_ENABLED', updates.email.inboundEnabled)
      if (updates.email.smtpPass && updates.email.smtpPass !== '••••••••') {
        updateEnvVar('SMTP_PASS', updates.email.smtpPass)
      }
    }

    // AI settings
    if (updates.ai) {
      updateEnvVar('AI_PROVIDER', updates.ai.provider)
      if (updates.ai.anthropicKey && updates.ai.anthropicKey !== '••••••••') {
        updateEnvVar('ANTHROPIC_API_KEY', updates.ai.anthropicKey)
      }
      if (updates.ai.openaiKey && updates.ai.openaiKey !== '••••••••') {
        updateEnvVar('OPENAI_API_KEY', updates.ai.openaiKey)
      }
    }

    // Feature flags
    if (updates.features) {
      updateEnvVar('AUTO_ASSIGN_ENABLED', updates.features.autoAssignEnabled)
      updateEnvVar('ENABLE_PUBLIC_REGISTRATION', updates.features.publicRegistration)
    }

    // URLs
    if (updates.urls) {
      updateEnvVar('BASE_URL', updates.urls.baseUrl)
      updateEnvVar('NEXT_PUBLIC_BASE_URL', updates.urls.publicBaseUrl)
      updateEnvVar('NEXTAUTH_URL', updates.urls.nextAuthUrl)

      // Update Azure redirect URI if base URL changed
      if (updates.urls.baseUrl) {
        updateEnvVar('AZURE_REDIRECT_URI', `${updates.urls.baseUrl}/api/auth/azure-callback`)
      }
    }

    // Build new .env.local content with sections
    let newEnvContent = `# Generated by AIDIN Admin Panel
# Last updated: ${new Date().toISOString()}
# Updated by: ${user.email}

NODE_ENV=development

# --- Authentication & JWT ---
JWT_SECRET=${envVars.get('JWT_SECRET') || 'dev_jwt_secret_value_at_least_32_chars_long_123456'}
DEV_LOGIN_ENABLED=${envVars.get('DEV_LOGIN_ENABLED') || 'true'}
DEV_ADMIN_EMAIL=${envVars.get('DEV_ADMIN_EMAIL') || 'admin@surterreproperties.com'}
AUTH_DEV_BYPASS=${envVars.get('AUTH_DEV_BYPASS') || 'true'}
NEXT_PUBLIC_AUTH_DEV_BYPASS=${envVars.get('NEXT_PUBLIC_AUTH_DEV_BYPASS') || 'true'}
NEXT_PUBLIC_DEV_LOGIN=${envVars.get('NEXT_PUBLIC_DEV_LOGIN') || 'true'}
AUTH_TRUST_HOST=true

# --- Base URLs ---
BASE_URL=${envVars.get('BASE_URL') || 'http://localhost:3000'}
NEXT_PUBLIC_BASE_URL=${envVars.get('NEXT_PUBLIC_BASE_URL') || 'http://localhost:3000'}
NEXTAUTH_URL=${envVars.get('NEXTAUTH_URL') || 'http://localhost:3000'}

# --- Azure AD Configuration ---
AZURE_AD_TENANT_ID=${envVars.get('AZURE_AD_TENANT_ID') || ''}
AZURE_AD_CLIENT_ID=${envVars.get('AZURE_AD_CLIENT_ID') || ''}
AZURE_AD_CLIENT_SECRET=${envVars.get('AZURE_AD_CLIENT_SECRET') || ''}
AZURE_TENANT_ID=${envVars.get('AZURE_TENANT_ID') || envVars.get('AZURE_AD_TENANT_ID') || ''}
AZURE_CLIENT_ID=${envVars.get('AZURE_CLIENT_ID') || envVars.get('AZURE_AD_CLIENT_ID') || ''}
AZURE_CLIENT_SECRET=${envVars.get('AZURE_CLIENT_SECRET') || envVars.get('AZURE_AD_CLIENT_SECRET') || ''}
AZURE_REDIRECT_URI=${envVars.get('AZURE_REDIRECT_URI') || 'http://localhost:3000/api/auth/azure-callback'}

# --- NEXT_PUBLIC Azure Vars (browser accessible) ---
NEXT_PUBLIC_AZURE_AD_TENANT_ID=${envVars.get('NEXT_PUBLIC_AZURE_AD_TENANT_ID') || envVars.get('AZURE_AD_TENANT_ID') || ''}
NEXT_PUBLIC_AZURE_TENANT_ID=${envVars.get('NEXT_PUBLIC_AZURE_TENANT_ID') || envVars.get('AZURE_AD_TENANT_ID') || ''}
NEXT_PUBLIC_AZURE_AD_CLIENT_ID=${envVars.get('NEXT_PUBLIC_AZURE_AD_CLIENT_ID') || envVars.get('AZURE_AD_CLIENT_ID') || ''}
NEXT_PUBLIC_AZURE_CLIENT_ID=${envVars.get('NEXT_PUBLIC_AZURE_CLIENT_ID') || envVars.get('AZURE_AD_CLIENT_ID') || ''}

# --- Microsoft Graph API ---
GRAPH_SCOPE=https://graph.microsoft.com/.default
GRAPH_AUTH_URL=${envVars.get('GRAPH_AUTH_URL') || 'https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/token'}
GRAPH_API_BASE=https://graph.microsoft.com/v1.0
MICROSOFT_GRAPH_SYNC_GROUP=${envVars.get('MICROSOFT_GRAPH_SYNC_GROUP') || ''}
SYNC_INTERVAL_MINUTES=${envVars.get('SYNC_INTERVAL_MINUTES') || '30'}
GRAPH_WEBHOOK_SECRET=${envVars.get('GRAPH_WEBHOOK_SECRET') || 'dev_graph_secret'}

# --- Google Workspace (future) ---
GOOGLE_CLIENT_ID=${envVars.get('GOOGLE_CLIENT_ID') || ''}
GOOGLE_CLIENT_SECRET=${envVars.get('GOOGLE_CLIENT_SECRET') || ''}
GOOGLE_WORKSPACE_DOMAIN=${envVars.get('GOOGLE_WORKSPACE_DOMAIN') || ''}

# --- Email Configuration ---
EMAIL_PROVIDER=${envVars.get('EMAIL_PROVIDER') || 'smtp'}
SMTP_HOST=${envVars.get('SMTP_HOST') || ''}
SMTP_PORT=${envVars.get('SMTP_PORT') || '587'}
SMTP_USER=${envVars.get('SMTP_USER') || ''}
SMTP_PASS=${envVars.get('SMTP_PASS') || ''}
HELPDESK_EMAIL=${envVars.get('HELPDESK_EMAIL') || 'helpdesk@surterreproperties.com'}
INBOUND_EMAIL_ENABLED=${envVars.get('INBOUND_EMAIL_ENABLED') || 'false'}

# --- AI Configuration ---
AI_PROVIDER=${envVars.get('AI_PROVIDER') || 'anthropic'}
ANTHROPIC_API_KEY=${envVars.get('ANTHROPIC_API_KEY') || ''}
OPENAI_API_KEY=${envVars.get('OPENAI_API_KEY') || ''}

# --- Feature Flags ---
AUTO_ASSIGN_ENABLED=${envVars.get('AUTO_ASSIGN_ENABLED') || 'false'}
ENABLE_PUBLIC_REGISTRATION=${envVars.get('ENABLE_PUBLIC_REGISTRATION') || 'false'}

# --- Database ---
DATABASE_URL=${envVars.get('DATABASE_URL') || 'file:./prisma/dev.db'}
`

    // Write the new .env.local file
    fs.writeFileSync(envPath, newEnvContent, 'utf8')

    // Log the change
    await prisma.auditLog.create({
      data: {
        userId: user.id,
        action: 'SETTINGS_UPDATE',
        entityType: 'Settings',
        entityId: 'env-config',
        oldValues: null,
        newValues: JSON.stringify({
          sections: Object.keys(updates),
          updatedBy: user.email,
          timestamp: new Date()
        })
      }
    })

    return NextResponse.json({
      success: true,
      message: 'Settings updated successfully. Please restart the application for changes to take effect.',
      requiresRestart: true
    })
  } catch (error) {
    console.error('Error updating settings:', error)
    return NextResponse.json(
      { error: error.message || 'Failed to update settings' },
      { status: error.status || 500 }
    )
  }
}
