name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  lint_type:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps --no-audit --no-fund
      - run: npm run ci:lint

  openapi:
    name: Generate & Validate OpenAPI
    runs-on: ubuntu-latest
    needs: [lint_type]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps --no-audit --no-fund
      - run: npm run openapi:gen
      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: docs/openapi.yaml

  deadcode:
    name: Dead Code Analysis
    runs-on: ubuntu-latest
    needs: [lint_type]
    continue-on-error: true  # report-only, non-blocking
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps --no-audit --no-fund
      - run: npm run deadcode:check || true
      - run: npm run deadcode:json > knip-report.json || echo '{}' > knip-report.json
      - name: Upload deadcode report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deadcode-report
          path: knip-report.json
          if-no-files-found: ignore

  build_test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [openapi]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aidin_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      CI: true
      NPM_CONFIG_PRODUCTION: "false"
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aidin_test?schema=public
      JWT_SECRET: "ci-placeholder-secret-minimum-32-characters-long-for-validation"
      GRAPH_CLIENT_SECRET: "ci-placeholder"
      OPENAI_API_KEY: "ci-placeholder"
      ENABLE_PUBLIC_REGISTRATION: "false"
      INBOUND_EMAIL_ENABLED: "false"
      AUTO_ASSIGN_ENABLED: "false"
      AI_PROVIDER: "openai"
      NODE_ENV: "production"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - run: npm ci --legacy-peer-deps --include=dev || npm install --legacy-peer-deps --no-audit --no-fund --include=dev
      - run: npx prisma generate
      - run: npx prisma db push --accept-data-loss
      - run: npm run build
      - run: npx playwright install --with-deps chromium
      - run: npm run test:e2e
        continue-on-error: true
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: ignore

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint_type, openapi, deadcode, build_test]
    if: always()
    steps:
      - name: Print results
        shell: bash
        run: |
          echo "Lint: ${{ needs.lint_type.result }} | OpenAPI: ${{ needs.openapi.result }} | DeadCode: ${{ needs.deadcode.result }} | Build: ${{ needs.build_test.result }}"
      - name: Fail if critical jobs failed
        if: ${{ needs.lint_type.result == 'failure' || needs.build_test.result == 'failure' }}
        shell: bash
        run: |
          echo "CI Failed - Critical jobs failed"
          exit 1
